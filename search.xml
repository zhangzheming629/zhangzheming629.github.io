<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Iview组件库树形控件增删改]]></title>
    <url>%2F2019%2F03%2F28%2FIview%E7%BB%84%E4%BB%B6%E6%A0%91%E5%BD%A2%E6%8E%A7%E4%BB%B6%E5%A2%9E%E5%88%A0%E6%94%B9%2F</url>
    <content type="text"><![CDATA[Iview组件库树形控件增删改iview组件库中有个树组件tree，根据官方示例，通过自定义组件实现renderContent的效果，实现了树组件的增删改操作。 实现的效果 iview中tree示例由iview官方文档我们可以知道，tree是有root、node、data组成。root 是根节点node:当前节点data:当前节点的数据 让我们开始用代码实现它tree Component基本 &lt;Tree :data=”treeData” :render=”renderContent” data是tree的一个props，用来生成tree的数据，类型是Array，默认值是[]。通过treeData给data赋值 render是tree的一个props，用来自定义渲染内容我们通过renderContent方法实现自定义的render效果 import TreeRender from &apos;./TreeRender&apos; export default { name: &apos;Column&apos;, components: {}, data () { return { treeData: [], // 树结构 treeList: null } }, renderContent (h, {root, node, data}) { let that = this return h(**TreeRenderRender**, { props: { treeRoot: root, treeNode: node, treeData: data }, on: { nodeAdd: (d) =&gt; that.handleAdd(d), nodeEdit: (r, n, d) =&gt; that.handleEdit(r, n, d), nodeDel: (r, n, d) =&gt; that.handleDelete(r, n, d), nodeAfterEdit: (r, n, d) =&gt; that.handleAfterEdit(r, n, d) } }) }, nodeAdd是添加方法 nodeEdit是点击编辑后的方法 nodeAfterEdit是编辑后失去焦点的方法 nodeDel是删除的方法 render基本组件 &lt;span&gt; &lt;span v-if=&quot;isEdit&quot;&gt; &lt;input size=&quot;small&quot; v-model=&quot;treeData.title&quot; autofocus @blur=&quot;nodeEditPass(treeRoot,treeNode,treeData)&quot;/&gt; &lt;/span&gt; &lt;template v-else&gt; &lt;span&gt;{{treeData.title}}&lt;/span&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span v-show=&quot;!isEdit&quot;&gt; &lt;Button type=&quot;info&quot; size=&quot;small&quot; icon=&quot;md-add&quot; @click=&quot;nodeAdd(treeData)&quot;&gt;添加&lt;/Button&gt; &lt;Button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;md-create&quot; @click=&quot;nodeEdit(treeRoot,treeNode,treeData)&quot;&gt;修改&lt;/Button&gt; &lt;Button type=&quot;error&quot; size=&quot;small&quot; icon=&quot;md-close&quot; @click=&quot;nodeDel(treeRoot,treeNode,treeData)&quot;&gt;删除&lt;/Button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/span&gt; props: { // 树的根节点 treeRoot: { type: Array }, // 当前节点 treeNode: { type: Object }, // 当前节点的数据 treeData: { type: Object } nodeAdd (d) { this.$emit(&apos;nodeAdd&apos;, d) }, nodeEdit (r, n, d) { this.isEdit = true d.isEdit = this.isEdit d.title = this.treeData.title this.$set(d, &apos;isEdit&apos;, d.isEdit) this.$set(d, &apos;title&apos;, d.title) this.$emit(&apos;nodeEdit&apos;, r, n, d) }, nodeEditPass (r, n, d) { // 编辑完成 this.isEdit = false d.isEdit = this.isEdit d.title = this.treeData.title this.$set(d, &apos;isEdit&apos;, d.isEdit) this.$set(d, &apos;title&apos;, d.title) this.$emit(&apos;nodeAfterEdit&apos;, r, n, d) }, nodeDel (r, n, d) { this.$emit(&apos;nodeDel&apos;, r, n, d) } 通过$emit的方式将增、改、删的操作抛给column组件 思考一下我们还缺少什么？ 负责给绑定data的treeData 因为data是Array，需要写一个递归方法 增删改的方法的实现 详细代码见我的githubhttps://github.com/zhangzheming629/IView/tree/master/tree]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F06%2F19%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Hello world 从对github的了解和使用，购买域名以及DNS解析，个人博客终于搭建好了我会这里记录自己工作以及生活上的点点滴滴，以及一些学习的心得。Coding your ambition!]]></content>
  </entry>
</search>
