<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Iview组件库树形控件增删改</title>
      <link href="/2019/03/28/Iview%E7%BB%84%E4%BB%B6%E6%A0%91%E5%BD%A2%E6%8E%A7%E4%BB%B6%E5%A2%9E%E5%88%A0%E6%94%B9/"/>
      <url>/2019/03/28/Iview%E7%BB%84%E4%BB%B6%E6%A0%91%E5%BD%A2%E6%8E%A7%E4%BB%B6%E5%A2%9E%E5%88%A0%E6%94%B9/</url>
      <content type="html"><![CDATA[<h1 id="Iview组件库树形控件增删改"><a href="#Iview组件库树形控件增删改" class="headerlink" title="Iview组件库树形控件增删改"></a>Iview组件库树形控件增删改</h1><p>iview组件库中有个树组件tree，根据官方示例，通过自定义组件实现renderContent的效果，实现了树组件的增删改操作。</p><p>实现的效果<br><img src="http://pp2xq7wv4.bkt.clouddn.com/WeChat7a373802d4443985dc223b2c2bd77d22.png" alt="tree"></p><p>iview中tree示例<br><img src="http://pp2xq7wv4.bkt.clouddn.com/WeChate7642f3eda1bec685842d392886d7200.png" alt="tree"><br>由iview官方文档我们可以知道，tree是有root、node、data组成。<br>root<array> 是根节点<br>node<object>:当前节点<br>data<object>:当前节点的数据</object></object></array></p><h2 id="让我们开始用代码实现它"><a href="#让我们开始用代码实现它" class="headerlink" title="让我们开始用代码实现它"></a>让我们开始用代码实现它</h2><h3 id="tree-Component基本"><a href="#tree-Component基本" class="headerlink" title="tree Component基本"></a>tree Component基本</h3> &lt;Tree :data=”treeData” :render=”renderContent”<p>data是tree的一个props，用来生成tree的数据，类型是Array，默认值是[]。通过treeData给data赋值</p><p>render是tree的一个props，用来自定义渲染内容<br>我们通过renderContent方法实现自定义的render效果</p><blockquote></blockquote><pre><code>data () {return { treeData: [],  // 树结构 treeList: null}</code></pre><blockquote></blockquote><pre><code>import TreeRender from &apos;./TreeRender&apos;export default {name: &apos;Column&apos;,components: {},data () {return { treeData: [],  // 树结构  treeList: null}</code></pre><p>  },</p><blockquote></blockquote><pre><code>renderContent (h, {root, node, data}) {  let that = this  return h(**TreeRenderRender**, {     props: {      treeRoot: root,      treeNode: node,      treeData: data    },    on: {      nodeAdd: (d) =&gt; that.handleAdd(d),      nodeEdit: (r, n, d) =&gt; that.handleEdit(r, n, d),      nodeDel: (r, n, d) =&gt; that.handleDelete(r, n, d),      nodeAfterEdit: (r, n, d) =&gt; that.handleAfterEdit(r, n, d)    }  })},</code></pre><blockquote><pre><code>nodeAdd是添加方法nodeEdit是点击编辑后的方法nodeAfterEdit是编辑后失去焦点的方法nodeDel是删除的方法</code></pre></blockquote><h3 id="render基本组件"><a href="#render基本组件" class="headerlink" title="render基本组件"></a>render基本组件</h3><blockquote></blockquote><pre><code>&lt;span&gt;&lt;span v-if=&quot;isEdit&quot;&gt;  &lt;input size=&quot;small&quot; v-model=&quot;treeData.title&quot; autofocus  @blur=&quot;nodeEditPass(treeRoot,treeNode,treeData)&quot;/&gt;&lt;/span&gt;&lt;template v-else&gt;&lt;span&gt;{{treeData.title}}&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span v-show=&quot;!isEdit&quot;&gt;  &lt;Button type=&quot;info&quot; size=&quot;small&quot;  icon=&quot;md-add&quot; @click=&quot;nodeAdd(treeData)&quot;&gt;添加&lt;/Button&gt;  &lt;Button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;md-create&quot; @click=&quot;nodeEdit(treeRoot,treeNode,treeData)&quot;&gt;修改&lt;/Button&gt;  &lt;Button type=&quot;error&quot; size=&quot;small&quot; icon=&quot;md-close&quot; @click=&quot;nodeDel(treeRoot,treeNode,treeData)&quot;&gt;删除&lt;/Button&gt;&lt;/span&gt;&lt;/template&gt;&lt;/span&gt;</code></pre><blockquote></blockquote><blockquote></blockquote><p>   props: {<br>    // 树的根节点<br>    treeRoot: {<br>      type: Array<br>    },<br>    // 当前节点<br>    treeNode: {<br>      type: Object<br>    },<br>    // 当前节点的数据<br>    treeData: {<br>      type: Object<br>    }</p><blockquote></blockquote><pre><code> nodeAdd (d) {  this.$emit(&apos;nodeAdd&apos;, d)},nodeEdit (r, n, d) {  this.isEdit = true  d.isEdit = this.isEdit  d.title = this.treeData.title  this.$set(d, &apos;isEdit&apos;, d.isEdit)  this.$set(d, &apos;title&apos;, d.title)  this.$emit(&apos;nodeEdit&apos;, r, n, d)},nodeEditPass (r, n, d) { // 编辑完成  this.isEdit = false  d.isEdit = this.isEdit  d.title = this.treeData.title  this.$set(d, &apos;isEdit&apos;, d.isEdit)  this.$set(d, &apos;title&apos;, d.title)  this.$emit(&apos;nodeAfterEdit&apos;, r, n, d)},nodeDel (r, n, d) {  this.$emit(&apos;nodeDel&apos;, r, n, d)}通过$emit的方式将增、改、删的操作抛给column组件</code></pre><h3 id="思考一下我们还缺少什么？"><a href="#思考一下我们还缺少什么？" class="headerlink" title="思考一下我们还缺少什么？"></a>思考一下我们还缺少什么？</h3><ol><li>负责给绑定data的treeData</li><li>因为data是Array，需要写一个递归方法</li><li>增删改的方法的实现</li></ol><h4 id="详细代码见我的github"><a href="#详细代码见我的github" class="headerlink" title="详细代码见我的github"></a>详细代码见我的github</h4><p><a href="https://github.com/zhangzheming629/IView/tree/master/tree" target="_blank" rel="noopener">https://github.com/zhangzheming629/IView/tree/master/tree</a></p>]]></content>
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue ivue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/06/19/hello-world/"/>
      <url>/2018/06/19/hello-world/</url>
      <content type="html"><![CDATA[<p>Hello world</p><p>从对github的了解和使用，购买域名以及DNS解析，个人博客终于搭建好了<br>我会这里记录自己工作以及生活上的点点滴滴，以及一些学习的心得。<br>Coding your  ambition!</p>]]></content>
      
      
    </entry>
    
  
  
</search>
